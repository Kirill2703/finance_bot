import psycopg2
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ====
DB_NAME = "finance_db_n1r6"
DB_USER = "finance_db_n1r6_user"
DB_PASSWORD = "UMwaOgl9g8OtSsnqRcTst8qaMEYrVePs"
DB_HOST = "dpg-d2va4th5pdvs73b7397g-a"
DB_PORT = "5432"

TOKEN = "8355466631:AAFcU12xq0wsMosK1AjoYXK5tpS2y4y-Ji0"

# ==== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ====
income_categories = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–æ–¥–∞—Ä–∫–∏", "–î—Ä—É–≥–æ–µ"]
expense_categories = ["–ü–∏—Ç–∞–Ω–∏–µ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                      "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", "–î—Ä—É–≥–æ–µ"]

# ==== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====
keyboard_main = [["üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"],
                 ["üìä –ë–∞–ª–∞–Ω—Å", "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"],
                 ["üìú –ò—Å—Ç–æ—Ä–∏—è"]]

# ==== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ ====


def get_connection():
    return psycopg2.connect(
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD,
        host=DB_HOST,
        port=DB_PORT
    )

# ==== –•–µ–ª–ø–µ—Ä—ã ====


def get_balances():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT account, SUM(amount) FROM finance GROUP BY account")
    rows = cursor.fetchall()
    balances = {"card": 0.0, "cash": 0.0}
    for account, total in rows:
        if account in balances:
            balances[account] = float(total)
    cursor.close()
    conn.close()
    return balances


def add_operation(op_type, account, category, amount, description):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO finance (type, account, category, amount, description, date) VALUES (%s,%s,%s,%s,%s,%s)",
        (op_type, account, category, amount, description, datetime.now())
    )
    conn.commit()
    cursor.close()
    conn.close()


def get_history(limit=10):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT type, account, category, amount, description, date FROM finance ORDER BY id DESC LIMIT %s", (limit,))
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    return rows[::-1]  # –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ

# ==== –ö–æ–º–∞–Ω–¥—ã ====


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ üí∞\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    balances = get_balances()
    total = balances["card"] + balances["cash"]
    await update.message.reply_text(
        f"üí≥ –ö–∞—Ä—Ç–∞: {balances['card']:.2f} z≈Ç\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {balances['cash']:.2f} z≈Ç\n"
        f"üí∞ –û–±—â–∏–π: {total:.2f} z≈Ç"
    )


async def setbalance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setbalance card 5000.50")
        return
    acc = context.args[0].lower()
    try:
        amount = float(context.args[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    if acc in ["card", "cash"]:
        add_operation("balance", acc, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞",
                      amount, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å {acc} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount:.2f} z≈Ç")
    else:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—á–µ—Ç–∞: card, cash")


async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_operations = get_history(10)
    if not last_operations:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
    else:
        msg = ""
        for op_type, account, category, amount, description, date in last_operations:
            msg += f"{date.strftime('%Y-%m-%d %H:%M')} | {op_type} | {account} | {category} | {amount:.2f} z≈Ç | {description}\n"
        await update.message.reply_text(msg)

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ====


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        await balance(update, context)
        return
    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è":
        await history(update, context)
        return

    # –í—ã–±–æ—Ä —Å—á–µ—Ç–∞
    if text in ["üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"]:
        context.user_data["account"] = "card" if text == "üí≥ –ö–∞—Ä—Ç–∞" else "cash"
        keyboard = [["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Å—á—ë—Ç: {text}. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
        return

    # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    if text == "‚ûï –î–æ—Ö–æ–¥":
        if "account" not in context.user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—á—ë—Ç: üí≥ –ö–∞—Ä—Ç–∞ –∏–ª–∏ üíµ –ù–∞–ª–∏—á–Ω—ã–µ")
            return
        context.user_data["action"] = "income"
        keyboard = [income_categories[i:i+2]
                    for i in range(0, len(income_categories), 2)] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=reply_markup)
        return
    if text == "‚ûñ –†–∞—Å—Ö–æ–¥":
        if "account" not in context.user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—á—ë—Ç: üí≥ –ö–∞—Ä—Ç–∞ –∏–ª–∏ üíµ –ù–∞–ª–∏—á–Ω—ã–µ")
            return
        context.user_data["action"] = "expense"
        keyboard = [expense_categories[i:i+2]
                    for i in range(0, len(expense_categories), 2)] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup)
        return

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if context.user_data.get("action") in ["income", "expense"] and "category" not in context.user_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("action", None)
            keyboard = [["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"], ["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return
        context.user_data["category"] = text
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=reply_markup)
        return

    # –°—É–º–º–∞
    if context.user_data.get("action") in ["income", "expense"] and "category" in context.user_data and "amount" not in context.user_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("category", None)
            keyboard = [income_categories[i:i+2] for i in range(0, len(income_categories), 2)] if context.user_data.get(
                "action") == "income" else [expense_categories[i:i+2] for i in range(0, len(expense_categories), 2)]
            keyboard += [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
            return
        try:
            amount = float(text.replace(",", "."))
            context.user_data["amount"] = amount
            keyboard = [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=reply_markup)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    # –û–ø–∏—Å–∞–Ω–∏–µ
    if context.user_data.get("action") in ["income", "expense"] and "category" in context.user_data and "amount" in context.user_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("amount", None)
            keyboard = [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=reply_markup)
            return
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        account = context.user_data["account"]
        amount = context.user_data["amount"]
        category = context.user_data["category"]
        op_type = context.user_data["action"]
        description = text
        add_operation(op_type, account, category,
                      amount if op_type == "income" else -amount, description)
        await update.message.reply_text(f"{op_type.title()} {amount:.2f} z≈Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ {account}")
        context.user_data.clear()
        reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====


def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("setbalance", setbalance))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
