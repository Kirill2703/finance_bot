import os
import psycopg2
import json
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

DATA_FILE = "data.json"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
try:
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
except FileNotFoundError:
    data = {"card": 0.0, "cash": 0.0, "history": []}

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ---
load_dotenv()
conn = psycopg2.connect(os.getenv("DATABASE_URL"))
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS finance (
    id SERIAL PRIMARY KEY,
    account TEXT,
    type TEXT,
    category TEXT,
    amount NUMERIC,
    description TEXT,
    date TIMESTAMP
);
""")
conn.commit()

# --- –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ data.json –≤ –ë–î ---
if data.get("history"):
    for op in data["history"]:
        cursor.execute("""
        INSERT INTO finance (account, type, category, amount, description, date)
        VALUES (%s, %s, %s, %s, %s, %s)
        ON CONFLICT DO NOTHING;
        """, (op["account"], op["type"], op["category"], op["amount"], op["description"], op["date"]))
    conn.commit()

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã ---
cursor.execute("SELECT account, SUM(amount) FROM finance GROUP BY account;")
rows = cursor.fetchall()
balances = {"card": 0.0, "cash": 0.0}
for row in rows:
    balances[row[0]] = float(row[1])

TOKEN = os.getenv("BOT_TOKEN")

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
income_categories = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–æ–¥–∞—Ä–∫–∏", "–î—Ä—É–≥–æ–µ"]
expense_categories = ["–ü–∏—Ç–∞–Ω–∏–µ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                      "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", "–î—Ä—É–≥–æ–µ"]

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
keyboard_main = [["üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"],
                 ["üìä –ë–∞–ª–∞–Ω—Å", "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"],
                 ["üìú –ò—Å—Ç–æ—Ä–∏—è"]]

# --- –ö–æ–º–∞–Ω–¥—ã ---


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ üí∞\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("DELETE FROM finance;")
    conn.commit()
    balances["card"] = 0.0
    balances["cash"] = 0.0
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ ‚úÖ")


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total = balances["card"] + balances["cash"]
    await update.message.reply_text(
        f"üí≥ –ö–∞—Ä—Ç–∞: {balances['card']:.2f} z≈Ç\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {balances['cash']:.2f} z≈Ç\n"
        f"üí∞ –û–±—â–∏–π: {total:.2f} z≈Ç"
    )


async def setbalance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setbalance card 5000.50")
        return
    acc = context.args[0].lower()
    try:
        amount = float(context.args[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    if acc in balances:
        cursor.execute("DELETE FROM finance WHERE account=%s;", (acc,))
        cursor.execute(
            "INSERT INTO finance (account, type, category, amount, description, date) VALUES (%s, %s, %s, %s, %s, %s);",
            (acc, "setbalance", "init", amount,
             "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å", datetime.now())
        )
        conn.commit()
        balances[acc] = amount
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å {acc} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount:.2f} z≈Ç")
    else:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—á–µ—Ç–∞: card, cash")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ---
    if context.user_data.get("setbalance_mode"):
        if text in ["üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"]:
            context.user_data["account"] = "card" if text == "üí≥ –ö–∞—Ä—Ç–∞" else "cash"
            context.user_data["action"] = "setbalance_input"
            keyboard = [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è {text}:", reply_markup=reply_markup)
            return
        elif context.user_data.get("action") == "setbalance_input":
            if text == "üîô –ù–∞–∑–∞–¥":
                context.user_data.clear()
                reply_markup = ReplyKeyboardMarkup(
                    keyboard_main, resize_keyboard=True)
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
                return
            try:
                amount = float(text.replace(",", "."))
                acc = context.user_data["account"]
                cursor.execute("DELETE FROM finance WHERE account=%s;", (acc,))
                cursor.execute(
                    "INSERT INTO finance (account, type, category, amount, description, date) VALUES (%s, %s, %s, %s, %s, %s);",
                    (acc, "setbalance", "init", amount,
                     "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å", datetime.now())
                )
                conn.commit()
                balances[acc] = amount
                await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å {acc} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount:.2f} z≈Ç")
                context.user_data.clear()
                reply_markup = ReplyKeyboardMarkup(
                    keyboard_main, resize_keyboard=True)
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return

    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        await balance(update, context)
        return

    elif text == "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        keyboard = [["üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        context.user_data["setbalance_mode"] = True
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞:", reply_markup=reply_markup)
        return

    elif text in ["üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"]:
        context.user_data["account"] = "card" if text == "üí≥ –ö–∞—Ä—Ç–∞" else "cash"
        keyboard = [["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Å—á—ë—Ç: {text}. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
        return

    elif text == "‚ûï –î–æ—Ö–æ–¥":
        if "account" not in context.user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—á—ë—Ç: üí≥ –ö–∞—Ä—Ç–∞ –∏–ª–∏ üíµ –ù–∞–ª–∏—á–Ω—ã–µ")
            return
        context.user_data["action"] = "income"
        keyboard = [income_categories[i:i+2]
                    for i in range(0, len(income_categories), 2)] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=reply_markup)
        return

    elif text == "‚ûñ –†–∞—Å—Ö–æ–¥":
        if "account" not in context.user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—á—ë—Ç: üí≥ –ö–∞—Ä—Ç–∞ –∏–ª–∏ üíµ –ù–∞–ª–∏—á–Ω—ã–µ")
            return
        context.user_data["action"] = "expense"
        keyboard = [expense_categories[i:i+2]
                    for i in range(0, len(expense_categories), 2)] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup)
        return

    elif text == "üîô –ù–∞–∑–∞–¥":
        context.user_data.clear()
        reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return

    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è":
        cursor.execute(
            "SELECT date, type, account, category, amount, description FROM finance ORDER BY id DESC LIMIT 10;")
        last_operations = cursor.fetchall()
        if not last_operations:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        else:
            msg = ""
            for op in reversed(last_operations):
                msg += f"{op[0]} | {op[1]} | {op[2]} | {op[3]} | {op[4]:.2f} z≈Ç | {op[5]}\n"
            await update.message.reply_text(msg)
        return

    # --- –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    if context.user_data.get("action") in ["income", "expense"] and "category" not in context.user_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("action", None)
            keyboard = [["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"], ["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return
        context.user_data["category"] = text
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=reply_markup)
        return

    # --- –í–≤–æ–¥ —Å—É–º–º—ã ---
    if context.user_data.get("action") in ["income", "expense"] and "category" in context.user_data and "amount" not in context.user_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("category", None)
            keyboard = [income_categories[i:i+2] for i in range(0, len(income_categories), 2)] if context.user_data.get(
                "action") == "income" else [expense_categories[i:i+2] for i in range(0, len(expense_categories), 2)]
            keyboard += [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
            return
        try:
            amount = float(text.replace(",", "."))
            context.user_data["amount"] = amount
            keyboard = [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=reply_markup)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    # --- –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
    if context.user_data.get("action") in ["income", "expense"] and "category" in context.user_data and "amount" in context.user_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("amount", None)
            keyboard = [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=reply_markup)
            return
        description = text
        acc = context.user_data["account"]
        amount = context.user_data["amount"]
        op_type = context.user_data["action"]
        category = context.user_data["category"]
        date = datetime.now()
        cursor.execute("INSERT INTO finance (account, type, category, amount, description, date) VALUES (%s, %s, %s, %s, %s, %s);",
                       (acc, op_type, category, amount if op_type == "income" else -amount, description, date))
        conn.commit()
        balances[acc] += amount if op_type == "income" else -amount
        await update.message.reply_text(f"{op_type.title()} {amount:.2f} z≈Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ {acc}")
        context.user_data.clear()
        reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---


def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("setbalance", setbalance))
    app.add_handler(CommandHandler("clearhistory", clear_history))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        webhook_url="https://finance-bot-m5g4.onrender.com"
    )


if __name__ == "__main__":
    main()
