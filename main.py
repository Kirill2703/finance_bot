import os
import psycopg2
from dotenv import load_dotenv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ DB URL ---
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL").strip()

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---


def get_conn():
    return psycopg2.connect(DATABASE_URL)


# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
income_categories = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–æ–¥–∞—Ä–∫–∏", "–î—Ä—É–≥–æ–µ"]
expense_categories = ["–ü–∏—Ç–∞–Ω–∏–µ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                      "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", "–î—Ä—É–≥–æ–µ"]

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
keyboard_main = [["üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"],
                 ["üìä –ë–∞–ª–∞–Ω—Å", "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"],
                 ["üìú –ò—Å—Ç–æ—Ä–∏—è"]]

# --- –ö–æ–º–∞–Ω–¥—ã ---


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ üí∞\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_conn()
    cursor = conn.cursor()
    cursor.execute("SELECT SUM(balance) FROM finance WHERE type='balance'")
    total = cursor.fetchone()[0] or 0.0
    cursor.execute(
        "SELECT balance FROM finance WHERE account='card' AND type='balance' ORDER BY id DESC LIMIT 1")
    card = cursor.fetchone()[0] if cursor.rowcount else 0.0
    cursor.execute(
        "SELECT balance FROM finance WHERE account='cash' AND type='balance' ORDER BY id DESC LIMIT 1")
    cash = cursor.fetchone()[0] if cursor.rowcount else 0.0
    cursor.close()
    conn.close()
    await update.message.reply_text(
        f"üí≥ –ö–∞—Ä—Ç–∞: {card:.2f} z≈Ç\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash:.2f} z≈Ç\n"
        f"üí∞ –û–±—â–∏–π: {total:.2f} z≈Ç"
    )


async def setbalance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setbalance card 5000.50")
        return
    acc = context.args[0].lower()
    try:
        amount = float(context.args[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    if acc in ["card", "cash"]:
        conn = get_conn()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO finance (account, balance, type, category, amount, description, date)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (acc, amount, "balance", None, 0.0, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å", datetime.now()))
        conn.commit()
        cursor.close()
        conn.close()
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å {acc} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount:.2f} z≈Ç")
    else:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—á–µ—Ç–∞: card, cash")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        await balance(update, context)
        return
    elif text == "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        keyboard = [["üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        context.user_data["setbalance_mode"] = True
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞:", reply_markup=reply_markup)
        return
    elif text in ["üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"]:
        context.user_data["account"] = "card" if text == "üí≥ –ö–∞—Ä—Ç–∞" else "cash"
        keyboard = [["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Å—á—ë—Ç: {text}. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
        return
    elif text == "üîô –ù–∞–∑–∞–¥":
        context.user_data.clear()
        reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return
    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è":
        conn = get_conn()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT account, type, category, amount, description, date
            FROM finance
            WHERE type IN ('income','expense')
            ORDER BY id DESC
            LIMIT 10
        """)
        rows = cursor.fetchall()
        cursor.close()
        conn.close()
        if not rows:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        else:
            msg = ""
            for row in rows:
                acc, op_type, cat, amt, desc, date = row
                msg += f"{date.strftime('%Y-%m-%d %H:%M')} | {op_type} | {acc} | {cat} | {amt:.2f} z≈Ç | {desc}\n"
            await update.message.reply_text(msg)
        return

    # --- –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥ ---
    if context.user_data.get("action") in ["income", "expense"] and "category" not in context.user_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("action", None)
            keyboard = [["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"], ["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return
        context.user_data["category"] = text
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=reply_markup)
        return

    if context.user_data.get("action") in ["income", "expense"] and "category" in context.user_data and "amount" not in context.user_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("category", None)
            categories = income_categories if context.user_data.get(
                "action") == "income" else expense_categories
            keyboard = [categories[i:i+2]
                        for i in range(0, len(categories), 2)] + [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
            return
        try:
            amount = float(text.replace(",", "."))
            context.user_data["amount"] = amount
            keyboard = [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=reply_markup)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    if context.user_data.get("action") in ["income", "expense"] and "category" in context.user_data and "amount" in context.user_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("amount", None)
            keyboard = [["üîô –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=reply_markup)
            return

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ë–î ---
        acc = context.user_data["account"]
        op_type = context.user_data["action"]
        category = context.user_data["category"]
        amount = context.user_data["amount"]
        description = text
        date = datetime.now()
        conn = get_conn()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO finance (account, balance, type, category, amount, description, date)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (acc, None, op_type, category, amount, description, date))
        # --- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å ---
        cursor.execute(f"""
            SELECT balance FROM finance WHERE account=%s AND type='balance' ORDER BY id DESC LIMIT 1
        """, (acc,))
        last_balance = cursor.fetchone()[0] or 0.0
        new_balance = last_balance + amount if op_type == "income" else last_balance - amount
        cursor.execute("""
            INSERT INTO finance (account, balance, type, category, amount, description, date)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (acc, new_balance, "balance", None, 0.0, "–û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å", date))
        conn.commit()
        cursor.close()
        conn.close()

        await update.message.reply_text(f"{op_type.title()} {amount:.2f} z≈Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ {acc}")
        context.user_data.clear()
        reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return

    # --- –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è ---
    if text == "‚ûï –î–æ—Ö–æ–¥":
        if "account" not in context.user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—á—ë—Ç: üí≥ –ö–∞—Ä—Ç–∞ –∏–ª–∏ üíµ –ù–∞–ª–∏—á–Ω—ã–µ")
            return
        context.user_data["action"] = "income"
        keyboard = [income_categories[i:i+2]
                    for i in range(0, len(income_categories), 2)] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=reply_markup)
        return
    if text == "‚ûñ –†–∞—Å—Ö–æ–¥":
        if "account" not in context.user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—á—ë—Ç: üí≥ –ö–∞—Ä—Ç–∞ –∏–ª–∏ üíµ –ù–∞–ª–∏—á–Ω—ã–µ")
            return
        context.user_data["action"] = "expense"
        keyboard = [expense_categories[i:i+2]
                    for i in range(0, len(expense_categories), 2)] + [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup)
        return

# --- –ó–∞–ø—É—Å–∫ ---


def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("setbalance", setbalance))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        webhook_url="https://finance-bot-m5g4.onrender.com"
    )


if __name__ == "__main__":
    main()
